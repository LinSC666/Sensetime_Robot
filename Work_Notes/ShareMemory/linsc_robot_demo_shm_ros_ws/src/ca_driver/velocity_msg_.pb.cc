// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: velocity_msg_.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "velocity_msg_.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace demo {

namespace {

const ::google::protobuf::Descriptor* twist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  twist_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_velocity_5fmsg_5f_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_velocity_5fmsg_5f_2eproto() {
  protobuf_AddDesc_velocity_5fmsg_5f_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "velocity_msg_.proto");
  GOOGLE_CHECK(file != NULL);
  twist_descriptor_ = file->message_type(0);
  static const int twist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twist, linear_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twist, angular_z_),
  };
  twist_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      twist_descriptor_,
      twist::default_instance_,
      twist_offsets_,
      -1,
      -1,
      -1,
      sizeof(twist),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twist, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(twist, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_velocity_5fmsg_5f_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      twist_descriptor_, &twist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_velocity_5fmsg_5f_2eproto() {
  delete twist::default_instance_;
  delete twist_reflection_;
}

void protobuf_AddDesc_velocity_5fmsg_5f_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_velocity_5fmsg_5f_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023velocity_msg_.proto\022\004demo\",\n\005twist\022\020\n\010"
    "linear_x\030\001 \001(\001\022\021\n\tangular_z\030\002 \001(\001b\006proto"
    "3", 81);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "velocity_msg_.proto", &protobuf_RegisterTypes);
  twist::default_instance_ = new twist();
  twist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_velocity_5fmsg_5f_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_velocity_5fmsg_5f_2eproto {
  StaticDescriptorInitializer_velocity_5fmsg_5f_2eproto() {
    protobuf_AddDesc_velocity_5fmsg_5f_2eproto();
  }
} static_descriptor_initializer_velocity_5fmsg_5f_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int twist::kLinearXFieldNumber;
const int twist::kAngularZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

twist::twist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.twist)
}

void twist::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

twist::twist(const twist& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:demo.twist)
}

void twist::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  linear_x_ = 0;
  angular_z_ = 0;
}

twist::~twist() {
  // @@protoc_insertion_point(destructor:demo.twist)
  SharedDtor();
}

void twist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void twist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* twist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return twist_descriptor_;
}

const twist& twist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_velocity_5fmsg_5f_2eproto();
  return *default_instance_;
}

twist* twist::default_instance_ = NULL;

twist* twist::New(::google::protobuf::Arena* arena) const {
  twist* n = new twist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void twist::Clear() {
// @@protoc_insertion_point(message_clear_start:demo.twist)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(twist, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<twist*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(linear_x_, angular_z_);

#undef ZR_HELPER_
#undef ZR_

}

bool twist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.twist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double linear_x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linear_x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_angular_z;
        break;
      }

      // optional double angular_z = 2;
      case 2: {
        if (tag == 17) {
         parse_angular_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angular_z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.twist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.twist)
  return false;
#undef DO_
}

void twist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.twist)
  // optional double linear_x = 1;
  if (this->linear_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->linear_x(), output);
  }

  // optional double angular_z = 2;
  if (this->angular_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->angular_z(), output);
  }

  // @@protoc_insertion_point(serialize_end:demo.twist)
}

::google::protobuf::uint8* twist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.twist)
  // optional double linear_x = 1;
  if (this->linear_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->linear_x(), target);
  }

  // optional double angular_z = 2;
  if (this->angular_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->angular_z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:demo.twist)
  return target;
}

int twist::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:demo.twist)
  int total_size = 0;

  // optional double linear_x = 1;
  if (this->linear_x() != 0) {
    total_size += 1 + 8;
  }

  // optional double angular_z = 2;
  if (this->angular_z() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void twist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demo.twist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const twist* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const twist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demo.twist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demo.twist)
    MergeFrom(*source);
  }
}

void twist::MergeFrom(const twist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demo.twist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.linear_x() != 0) {
    set_linear_x(from.linear_x());
  }
  if (from.angular_z() != 0) {
    set_angular_z(from.angular_z());
  }
}

void twist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demo.twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void twist::CopyFrom(const twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demo.twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool twist::IsInitialized() const {

  return true;
}

void twist::Swap(twist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void twist::InternalSwap(twist* other) {
  std::swap(linear_x_, other->linear_x_);
  std::swap(angular_z_, other->angular_z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata twist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = twist_descriptor_;
  metadata.reflection = twist_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// twist

// optional double linear_x = 1;
void twist::clear_linear_x() {
  linear_x_ = 0;
}
 double twist::linear_x() const {
  // @@protoc_insertion_point(field_get:demo.twist.linear_x)
  return linear_x_;
}
 void twist::set_linear_x(double value) {
  
  linear_x_ = value;
  // @@protoc_insertion_point(field_set:demo.twist.linear_x)
}

// optional double angular_z = 2;
void twist::clear_angular_z() {
  angular_z_ = 0;
}
 double twist::angular_z() const {
  // @@protoc_insertion_point(field_get:demo.twist.angular_z)
  return angular_z_;
}
 void twist::set_angular_z(double value) {
  
  angular_z_ = value;
  // @@protoc_insertion_point(field_set:demo.twist.angular_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

// @@protoc_insertion_point(global_scope)
