// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: odom_msg_.proto

#ifndef PROTOBUF_odom_5fmsg_5f_2eproto__INCLUDED
#define PROTOBUF_odom_5fmsg_5f_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace demo {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_odom_5fmsg_5f_2eproto();
void protobuf_AssignDesc_odom_5fmsg_5f_2eproto();
void protobuf_ShutdownFile_odom_5fmsg_5f_2eproto();

class odometry;

// ===================================================================

class odometry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:demo.odometry) */ {
 public:
  odometry();
  virtual ~odometry();

  odometry(const odometry& from);

  inline odometry& operator=(const odometry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const odometry& default_instance();

  void Swap(odometry* other);

  // implements Message ----------------------------------------------

  inline odometry* New() const { return New(NULL); }

  odometry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const odometry& from);
  void MergeFrom(const odometry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(odometry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double pose_pose_position_x = 1;
  void clear_pose_pose_position_x();
  static const int kPosePosePositionXFieldNumber = 1;
  double pose_pose_position_x() const;
  void set_pose_pose_position_x(double value);

  // optional double pose_pose_position_y = 2;
  void clear_pose_pose_position_y();
  static const int kPosePosePositionYFieldNumber = 2;
  double pose_pose_position_y() const;
  void set_pose_pose_position_y(double value);

  // optional double pose_pose_orientation_x = 3;
  void clear_pose_pose_orientation_x();
  static const int kPosePoseOrientationXFieldNumber = 3;
  double pose_pose_orientation_x() const;
  void set_pose_pose_orientation_x(double value);

  // optional double pose_pose_orientation_y = 4;
  void clear_pose_pose_orientation_y();
  static const int kPosePoseOrientationYFieldNumber = 4;
  double pose_pose_orientation_y() const;
  void set_pose_pose_orientation_y(double value);

  // optional double pose_pose_orientation_z = 5;
  void clear_pose_pose_orientation_z();
  static const int kPosePoseOrientationZFieldNumber = 5;
  double pose_pose_orientation_z() const;
  void set_pose_pose_orientation_z(double value);

  // optional double pose_pose_orientation_w = 6;
  void clear_pose_pose_orientation_w();
  static const int kPosePoseOrientationWFieldNumber = 6;
  double pose_pose_orientation_w() const;
  void set_pose_pose_orientation_w(double value);

  // @@protoc_insertion_point(class_scope:demo.odometry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double pose_pose_position_x_;
  double pose_pose_position_y_;
  double pose_pose_orientation_x_;
  double pose_pose_orientation_y_;
  double pose_pose_orientation_z_;
  double pose_pose_orientation_w_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_odom_5fmsg_5f_2eproto();
  friend void protobuf_AssignDesc_odom_5fmsg_5f_2eproto();
  friend void protobuf_ShutdownFile_odom_5fmsg_5f_2eproto();

  void InitAsDefaultInstance();
  static odometry* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// odometry

// optional double pose_pose_position_x = 1;
inline void odometry::clear_pose_pose_position_x() {
  pose_pose_position_x_ = 0;
}
inline double odometry::pose_pose_position_x() const {
  // @@protoc_insertion_point(field_get:demo.odometry.pose_pose_position_x)
  return pose_pose_position_x_;
}
inline void odometry::set_pose_pose_position_x(double value) {
  
  pose_pose_position_x_ = value;
  // @@protoc_insertion_point(field_set:demo.odometry.pose_pose_position_x)
}

// optional double pose_pose_position_y = 2;
inline void odometry::clear_pose_pose_position_y() {
  pose_pose_position_y_ = 0;
}
inline double odometry::pose_pose_position_y() const {
  // @@protoc_insertion_point(field_get:demo.odometry.pose_pose_position_y)
  return pose_pose_position_y_;
}
inline void odometry::set_pose_pose_position_y(double value) {
  
  pose_pose_position_y_ = value;
  // @@protoc_insertion_point(field_set:demo.odometry.pose_pose_position_y)
}

// optional double pose_pose_orientation_x = 3;
inline void odometry::clear_pose_pose_orientation_x() {
  pose_pose_orientation_x_ = 0;
}
inline double odometry::pose_pose_orientation_x() const {
  // @@protoc_insertion_point(field_get:demo.odometry.pose_pose_orientation_x)
  return pose_pose_orientation_x_;
}
inline void odometry::set_pose_pose_orientation_x(double value) {
  
  pose_pose_orientation_x_ = value;
  // @@protoc_insertion_point(field_set:demo.odometry.pose_pose_orientation_x)
}

// optional double pose_pose_orientation_y = 4;
inline void odometry::clear_pose_pose_orientation_y() {
  pose_pose_orientation_y_ = 0;
}
inline double odometry::pose_pose_orientation_y() const {
  // @@protoc_insertion_point(field_get:demo.odometry.pose_pose_orientation_y)
  return pose_pose_orientation_y_;
}
inline void odometry::set_pose_pose_orientation_y(double value) {
  
  pose_pose_orientation_y_ = value;
  // @@protoc_insertion_point(field_set:demo.odometry.pose_pose_orientation_y)
}

// optional double pose_pose_orientation_z = 5;
inline void odometry::clear_pose_pose_orientation_z() {
  pose_pose_orientation_z_ = 0;
}
inline double odometry::pose_pose_orientation_z() const {
  // @@protoc_insertion_point(field_get:demo.odometry.pose_pose_orientation_z)
  return pose_pose_orientation_z_;
}
inline void odometry::set_pose_pose_orientation_z(double value) {
  
  pose_pose_orientation_z_ = value;
  // @@protoc_insertion_point(field_set:demo.odometry.pose_pose_orientation_z)
}

// optional double pose_pose_orientation_w = 6;
inline void odometry::clear_pose_pose_orientation_w() {
  pose_pose_orientation_w_ = 0;
}
inline double odometry::pose_pose_orientation_w() const {
  // @@protoc_insertion_point(field_get:demo.odometry.pose_pose_orientation_w)
  return pose_pose_orientation_w_;
}
inline void odometry::set_pose_pose_orientation_w(double value) {
  
  pose_pose_orientation_w_ = value;
  // @@protoc_insertion_point(field_set:demo.odometry.pose_pose_orientation_w)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_odom_5fmsg_5f_2eproto__INCLUDED
