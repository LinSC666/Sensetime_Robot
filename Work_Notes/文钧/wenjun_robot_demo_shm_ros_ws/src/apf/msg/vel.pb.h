// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vel.proto

#ifndef PROTOBUF_vel_2eproto__INCLUDED
#define PROTOBUF_vel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gos_test {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_vel_2eproto();
void protobuf_AssignDesc_vel_2eproto();
void protobuf_ShutdownFile_vel_2eproto();

class vel;

// ===================================================================

class vel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gos_test.vel) */ {
 public:
  vel();
  virtual ~vel();

  vel(const vel& from);

  inline vel& operator=(const vel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vel& default_instance();

  void Swap(vel* other);

  // implements Message ----------------------------------------------

  inline vel* New() const { return New(NULL); }

  vel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vel& from);
  void MergeFrom(const vel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(vel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double linear_x = 1;
  void clear_linear_x();
  static const int kLinearXFieldNumber = 1;
  double linear_x() const;
  void set_linear_x(double value);

  // optional double angular_z = 2;
  void clear_angular_z();
  static const int kAngularZFieldNumber = 2;
  double angular_z() const;
  void set_angular_z(double value);

  // @@protoc_insertion_point(class_scope:gos_test.vel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double linear_x_;
  double angular_z_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vel_2eproto();
  friend void protobuf_AssignDesc_vel_2eproto();
  friend void protobuf_ShutdownFile_vel_2eproto();

  void InitAsDefaultInstance();
  static vel* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// vel

// optional double linear_x = 1;
inline void vel::clear_linear_x() {
  linear_x_ = 0;
}
inline double vel::linear_x() const {
  // @@protoc_insertion_point(field_get:gos_test.vel.linear_x)
  return linear_x_;
}
inline void vel::set_linear_x(double value) {
  
  linear_x_ = value;
  // @@protoc_insertion_point(field_set:gos_test.vel.linear_x)
}

// optional double angular_z = 2;
inline void vel::clear_angular_z() {
  angular_z_ = 0;
}
inline double vel::angular_z() const {
  // @@protoc_insertion_point(field_get:gos_test.vel.angular_z)
  return angular_z_;
}
inline void vel::set_angular_z(double value) {
  
  angular_z_ = value;
  // @@protoc_insertion_point(field_set:gos_test.vel.angular_z)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gos_test

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vel_2eproto__INCLUDED
