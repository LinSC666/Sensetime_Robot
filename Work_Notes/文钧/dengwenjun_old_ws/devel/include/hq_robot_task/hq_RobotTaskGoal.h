// Generated by gencpp from file hq_robot_task/hq_RobotTaskGoal.msg
// DO NOT EDIT!


#ifndef HQ_ROBOT_TASK_MESSAGE_HQ_ROBOTTASKGOAL_H
#define HQ_ROBOT_TASK_MESSAGE_HQ_ROBOTTASKGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hq_robot_task
{
template <class ContainerAllocator>
struct hq_RobotTaskGoal_
{
  typedef hq_RobotTaskGoal_<ContainerAllocator> Type;

  hq_RobotTaskGoal_()
    : name()
    , uid()
    , parameters()  {
    }
  hq_RobotTaskGoal_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , uid(_alloc)
    , parameters(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _uid_type;
  _uid_type uid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameters_type;
  _parameters_type parameters;





  typedef boost::shared_ptr< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> const> ConstPtr;

}; // struct hq_RobotTaskGoal_

typedef ::hq_robot_task::hq_RobotTaskGoal_<std::allocator<void> > hq_RobotTaskGoal;

typedef boost::shared_ptr< ::hq_robot_task::hq_RobotTaskGoal > hq_RobotTaskGoalPtr;
typedef boost::shared_ptr< ::hq_robot_task::hq_RobotTaskGoal const> hq_RobotTaskGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hq_robot_task

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'hq_robot_task': ['/home/linsc/ROS_Project/Sensetime_ws/dengwenjun_old_ws/devel/share/hq_robot_task/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47a1520173b55d0b167022a5f87c0efd";
  }

  static const char* value(const ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47a1520173b55d0bULL;
  static const uint64_t static_value2 = 0x167022a5f87c0efdULL;
};

template<class ContainerAllocator>
struct DataType< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hq_robot_task/hq_RobotTaskGoal";
  }

  static const char* value(const ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
string name\n\
string uid\n\
string parameters\n\
";
  }

  static const char* value(const ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.uid);
      stream.next(m.parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hq_RobotTaskGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hq_robot_task::hq_RobotTaskGoal_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "uid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.uid);
    s << indent << "parameters: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameters);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HQ_ROBOT_TASK_MESSAGE_HQ_ROBOTTASKGOAL_H
