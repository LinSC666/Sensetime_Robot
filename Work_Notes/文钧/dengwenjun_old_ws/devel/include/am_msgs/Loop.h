// Generated by gencpp from file am_msgs/Loop.msg
// DO NOT EDIT!


#ifndef AM_MSGS_MESSAGE_LOOP_H
#define AM_MSGS_MESSAGE_LOOP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <am_msgs/LoopData.h>
#include <am_msgs/LoopData.h>
#include <am_msgs/LoopData.h>
#include <am_msgs/LoopData.h>
#include <am_msgs/LoopData.h>
#include <am_msgs/LoopData.h>
#include <am_msgs/LoopData.h>
#include <am_msgs/LoopData.h>
#include <am_msgs/LoopData.h>

namespace am_msgs
{
template <class ContainerAllocator>
struct Loop_
{
  typedef Loop_<ContainerAllocator> Type;

  Loop_()
    : header()
    , frontCenter(0)
    , frontRight(0)
    , rearLeft(0)
    , rearRight(0)
    , A0()
    , N()
    , F()
    , G1()
    , G2()
    , G3()
    , QA0()
    , QF()
    , QN()  {
    }
  Loop_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frontCenter(0)
    , frontRight(0)
    , rearLeft(0)
    , rearRight(0)
    , A0(_alloc)
    , N(_alloc)
    , F(_alloc)
    , G1(_alloc)
    , G2(_alloc)
    , G3(_alloc)
    , QA0(_alloc)
    , QF(_alloc)
    , QN(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _frontCenter_type;
  _frontCenter_type frontCenter;

   typedef int32_t _frontRight_type;
  _frontRight_type frontRight;

   typedef int32_t _rearLeft_type;
  _rearLeft_type rearLeft;

   typedef int32_t _rearRight_type;
  _rearRight_type rearRight;

   typedef  ::am_msgs::LoopData_<ContainerAllocator>  _A0_type;
  _A0_type A0;

   typedef  ::am_msgs::LoopData_<ContainerAllocator>  _N_type;
  _N_type N;

   typedef  ::am_msgs::LoopData_<ContainerAllocator>  _F_type;
  _F_type F;

   typedef  ::am_msgs::LoopData_<ContainerAllocator>  _G1_type;
  _G1_type G1;

   typedef  ::am_msgs::LoopData_<ContainerAllocator>  _G2_type;
  _G2_type G2;

   typedef  ::am_msgs::LoopData_<ContainerAllocator>  _G3_type;
  _G3_type G3;

   typedef  ::am_msgs::LoopData_<ContainerAllocator>  _QA0_type;
  _QA0_type QA0;

   typedef  ::am_msgs::LoopData_<ContainerAllocator>  _QF_type;
  _QF_type QF;

   typedef  ::am_msgs::LoopData_<ContainerAllocator>  _QN_type;
  _QN_type QN;





  typedef boost::shared_ptr< ::am_msgs::Loop_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::am_msgs::Loop_<ContainerAllocator> const> ConstPtr;

}; // struct Loop_

typedef ::am_msgs::Loop_<std::allocator<void> > Loop;

typedef boost::shared_ptr< ::am_msgs::Loop > LoopPtr;
typedef boost::shared_ptr< ::am_msgs::Loop const> LoopConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::am_msgs::Loop_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::am_msgs::Loop_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace am_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'am_msgs': ['/home/linsc/ROS_Project/Sensetime_ws/dengwenjun_old_ws/src/am_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::am_msgs::Loop_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::am_msgs::Loop_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::am_msgs::Loop_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::am_msgs::Loop_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::am_msgs::Loop_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::am_msgs::Loop_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::am_msgs::Loop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92ab15532a8fc5e195e713df1d41a4bf";
  }

  static const char* value(const ::am_msgs::Loop_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92ab15532a8fc5e1ULL;
  static const uint64_t static_value2 = 0x95e713df1d41a4bfULL;
};

template<class ContainerAllocator>
struct DataType< ::am_msgs::Loop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "am_msgs/Loop";
  }

  static const char* value(const ::am_msgs::Loop_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::am_msgs::Loop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32 frontCenter\n\
int32 frontRight\n\
int32 rearLeft\n\
int32 rearRight\n\
LoopData A0\n\
LoopData N\n\
LoopData F\n\
LoopData G1\n\
LoopData G2\n\
LoopData G3\n\
LoopData QA0\n\
LoopData QF\n\
LoopData QN \n\
 \n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: am_msgs/LoopData\n\
int32 frontCenter\n\
int32 frontRight\n\
int32 rearLeft\n\
int32 rearRight\n\
 \n\
";
  }

  static const char* value(const ::am_msgs::Loop_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::am_msgs::Loop_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frontCenter);
      stream.next(m.frontRight);
      stream.next(m.rearLeft);
      stream.next(m.rearRight);
      stream.next(m.A0);
      stream.next(m.N);
      stream.next(m.F);
      stream.next(m.G1);
      stream.next(m.G2);
      stream.next(m.G3);
      stream.next(m.QA0);
      stream.next(m.QF);
      stream.next(m.QN);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Loop_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::am_msgs::Loop_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::am_msgs::Loop_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frontCenter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frontCenter);
    s << indent << "frontRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frontRight);
    s << indent << "rearLeft: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rearLeft);
    s << indent << "rearRight: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rearRight);
    s << indent << "A0: ";
    s << std::endl;
    Printer< ::am_msgs::LoopData_<ContainerAllocator> >::stream(s, indent + "  ", v.A0);
    s << indent << "N: ";
    s << std::endl;
    Printer< ::am_msgs::LoopData_<ContainerAllocator> >::stream(s, indent + "  ", v.N);
    s << indent << "F: ";
    s << std::endl;
    Printer< ::am_msgs::LoopData_<ContainerAllocator> >::stream(s, indent + "  ", v.F);
    s << indent << "G1: ";
    s << std::endl;
    Printer< ::am_msgs::LoopData_<ContainerAllocator> >::stream(s, indent + "  ", v.G1);
    s << indent << "G2: ";
    s << std::endl;
    Printer< ::am_msgs::LoopData_<ContainerAllocator> >::stream(s, indent + "  ", v.G2);
    s << indent << "G3: ";
    s << std::endl;
    Printer< ::am_msgs::LoopData_<ContainerAllocator> >::stream(s, indent + "  ", v.G3);
    s << indent << "QA0: ";
    s << std::endl;
    Printer< ::am_msgs::LoopData_<ContainerAllocator> >::stream(s, indent + "  ", v.QA0);
    s << indent << "QF: ";
    s << std::endl;
    Printer< ::am_msgs::LoopData_<ContainerAllocator> >::stream(s, indent + "  ", v.QF);
    s << indent << "QN: ";
    s << std::endl;
    Printer< ::am_msgs::LoopData_<ContainerAllocator> >::stream(s, indent + "  ", v.QN);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AM_MSGS_MESSAGE_LOOP_H
