# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from am_msgs/Loop.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import am_msgs.msg
import std_msgs.msg

class Loop(genpy.Message):
  _md5sum = "92ab15532a8fc5e195e713df1d41a4bf"
  _type = "am_msgs/Loop"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
int32 frontCenter
int32 frontRight
int32 rearLeft
int32 rearRight
LoopData A0
LoopData N
LoopData F
LoopData G1
LoopData G2
LoopData G3
LoopData QA0
LoopData QF
LoopData QN 
 
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: am_msgs/LoopData
int32 frontCenter
int32 frontRight
int32 rearLeft
int32 rearRight
 """
  __slots__ = ['header','frontCenter','frontRight','rearLeft','rearRight','A0','N','F','G1','G2','G3','QA0','QF','QN']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','am_msgs/LoopData','am_msgs/LoopData','am_msgs/LoopData','am_msgs/LoopData','am_msgs/LoopData','am_msgs/LoopData','am_msgs/LoopData','am_msgs/LoopData','am_msgs/LoopData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frontCenter,frontRight,rearLeft,rearRight,A0,N,F,G1,G2,G3,QA0,QF,QN

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Loop, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frontCenter is None:
        self.frontCenter = 0
      if self.frontRight is None:
        self.frontRight = 0
      if self.rearLeft is None:
        self.rearLeft = 0
      if self.rearRight is None:
        self.rearRight = 0
      if self.A0 is None:
        self.A0 = am_msgs.msg.LoopData()
      if self.N is None:
        self.N = am_msgs.msg.LoopData()
      if self.F is None:
        self.F = am_msgs.msg.LoopData()
      if self.G1 is None:
        self.G1 = am_msgs.msg.LoopData()
      if self.G2 is None:
        self.G2 = am_msgs.msg.LoopData()
      if self.G3 is None:
        self.G3 = am_msgs.msg.LoopData()
      if self.QA0 is None:
        self.QA0 = am_msgs.msg.LoopData()
      if self.QF is None:
        self.QF = am_msgs.msg.LoopData()
      if self.QN is None:
        self.QN = am_msgs.msg.LoopData()
    else:
      self.header = std_msgs.msg.Header()
      self.frontCenter = 0
      self.frontRight = 0
      self.rearLeft = 0
      self.rearRight = 0
      self.A0 = am_msgs.msg.LoopData()
      self.N = am_msgs.msg.LoopData()
      self.F = am_msgs.msg.LoopData()
      self.G1 = am_msgs.msg.LoopData()
      self.G2 = am_msgs.msg.LoopData()
      self.G3 = am_msgs.msg.LoopData()
      self.QA0 = am_msgs.msg.LoopData()
      self.QF = am_msgs.msg.LoopData()
      self.QN = am_msgs.msg.LoopData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_40i().pack(_x.frontCenter, _x.frontRight, _x.rearLeft, _x.rearRight, _x.A0.frontCenter, _x.A0.frontRight, _x.A0.rearLeft, _x.A0.rearRight, _x.N.frontCenter, _x.N.frontRight, _x.N.rearLeft, _x.N.rearRight, _x.F.frontCenter, _x.F.frontRight, _x.F.rearLeft, _x.F.rearRight, _x.G1.frontCenter, _x.G1.frontRight, _x.G1.rearLeft, _x.G1.rearRight, _x.G2.frontCenter, _x.G2.frontRight, _x.G2.rearLeft, _x.G2.rearRight, _x.G3.frontCenter, _x.G3.frontRight, _x.G3.rearLeft, _x.G3.rearRight, _x.QA0.frontCenter, _x.QA0.frontRight, _x.QA0.rearLeft, _x.QA0.rearRight, _x.QF.frontCenter, _x.QF.frontRight, _x.QF.rearLeft, _x.QF.rearRight, _x.QN.frontCenter, _x.QN.frontRight, _x.QN.rearLeft, _x.QN.rearRight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.A0 is None:
        self.A0 = am_msgs.msg.LoopData()
      if self.N is None:
        self.N = am_msgs.msg.LoopData()
      if self.F is None:
        self.F = am_msgs.msg.LoopData()
      if self.G1 is None:
        self.G1 = am_msgs.msg.LoopData()
      if self.G2 is None:
        self.G2 = am_msgs.msg.LoopData()
      if self.G3 is None:
        self.G3 = am_msgs.msg.LoopData()
      if self.QA0 is None:
        self.QA0 = am_msgs.msg.LoopData()
      if self.QF is None:
        self.QF = am_msgs.msg.LoopData()
      if self.QN is None:
        self.QN = am_msgs.msg.LoopData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 160
      (_x.frontCenter, _x.frontRight, _x.rearLeft, _x.rearRight, _x.A0.frontCenter, _x.A0.frontRight, _x.A0.rearLeft, _x.A0.rearRight, _x.N.frontCenter, _x.N.frontRight, _x.N.rearLeft, _x.N.rearRight, _x.F.frontCenter, _x.F.frontRight, _x.F.rearLeft, _x.F.rearRight, _x.G1.frontCenter, _x.G1.frontRight, _x.G1.rearLeft, _x.G1.rearRight, _x.G2.frontCenter, _x.G2.frontRight, _x.G2.rearLeft, _x.G2.rearRight, _x.G3.frontCenter, _x.G3.frontRight, _x.G3.rearLeft, _x.G3.rearRight, _x.QA0.frontCenter, _x.QA0.frontRight, _x.QA0.rearLeft, _x.QA0.rearRight, _x.QF.frontCenter, _x.QF.frontRight, _x.QF.rearLeft, _x.QF.rearRight, _x.QN.frontCenter, _x.QN.frontRight, _x.QN.rearLeft, _x.QN.rearRight,) = _get_struct_40i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_40i().pack(_x.frontCenter, _x.frontRight, _x.rearLeft, _x.rearRight, _x.A0.frontCenter, _x.A0.frontRight, _x.A0.rearLeft, _x.A0.rearRight, _x.N.frontCenter, _x.N.frontRight, _x.N.rearLeft, _x.N.rearRight, _x.F.frontCenter, _x.F.frontRight, _x.F.rearLeft, _x.F.rearRight, _x.G1.frontCenter, _x.G1.frontRight, _x.G1.rearLeft, _x.G1.rearRight, _x.G2.frontCenter, _x.G2.frontRight, _x.G2.rearLeft, _x.G2.rearRight, _x.G3.frontCenter, _x.G3.frontRight, _x.G3.rearLeft, _x.G3.rearRight, _x.QA0.frontCenter, _x.QA0.frontRight, _x.QA0.rearLeft, _x.QA0.rearRight, _x.QF.frontCenter, _x.QF.frontRight, _x.QF.rearLeft, _x.QF.rearRight, _x.QN.frontCenter, _x.QN.frontRight, _x.QN.rearLeft, _x.QN.rearRight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.A0 is None:
        self.A0 = am_msgs.msg.LoopData()
      if self.N is None:
        self.N = am_msgs.msg.LoopData()
      if self.F is None:
        self.F = am_msgs.msg.LoopData()
      if self.G1 is None:
        self.G1 = am_msgs.msg.LoopData()
      if self.G2 is None:
        self.G2 = am_msgs.msg.LoopData()
      if self.G3 is None:
        self.G3 = am_msgs.msg.LoopData()
      if self.QA0 is None:
        self.QA0 = am_msgs.msg.LoopData()
      if self.QF is None:
        self.QF = am_msgs.msg.LoopData()
      if self.QN is None:
        self.QN = am_msgs.msg.LoopData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 160
      (_x.frontCenter, _x.frontRight, _x.rearLeft, _x.rearRight, _x.A0.frontCenter, _x.A0.frontRight, _x.A0.rearLeft, _x.A0.rearRight, _x.N.frontCenter, _x.N.frontRight, _x.N.rearLeft, _x.N.rearRight, _x.F.frontCenter, _x.F.frontRight, _x.F.rearLeft, _x.F.rearRight, _x.G1.frontCenter, _x.G1.frontRight, _x.G1.rearLeft, _x.G1.rearRight, _x.G2.frontCenter, _x.G2.frontRight, _x.G2.rearLeft, _x.G2.rearRight, _x.G3.frontCenter, _x.G3.frontRight, _x.G3.rearLeft, _x.G3.rearRight, _x.QA0.frontCenter, _x.QA0.frontRight, _x.QA0.rearLeft, _x.QA0.rearRight, _x.QF.frontCenter, _x.QF.frontRight, _x.QF.rearLeft, _x.QF.rearRight, _x.QN.frontCenter, _x.QN.frontRight, _x.QN.rearLeft, _x.QN.rearRight,) = _get_struct_40i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_40i = None
def _get_struct_40i():
    global _struct_40i
    if _struct_40i is None:
        _struct_40i = struct.Struct("<40i")
    return _struct_40i
