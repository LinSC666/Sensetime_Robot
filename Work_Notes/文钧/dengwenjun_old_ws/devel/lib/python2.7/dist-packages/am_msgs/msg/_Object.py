# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from am_msgs/Object.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import am_msgs.msg

class Object(genpy.Message):
  _md5sum = "0c9b334f865e3aab40d33e895236278a"
  _type = "am_msgs/Object"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 object_index
float32 confidence # A value between 0.0 and 1.0.
Rect bounding_box_cv # A bounding box on the camera coordinate.
geometry_msgs/Point[] location_bv # A location on the bird-view coordinate. Z component is always 0.
uint8 label
uint8 LABEL_UNKNOWN=0
uint8 LABEL_PEDESTRIAN=1
uint8 LABEL_CONE=2
uint8 LABEL_GOLF=3
uint8 LABEL_SPRINKLER=4

================================================================================
MSG: am_msgs/Rect
float32 x
float32 y
float32 width
float32 height

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  LABEL_UNKNOWN = 0
  LABEL_PEDESTRIAN = 1
  LABEL_CONE = 2
  LABEL_GOLF = 3
  LABEL_SPRINKLER = 4

  __slots__ = ['object_index','confidence','bounding_box_cv','location_bv','label']
  _slot_types = ['int32','float32','am_msgs/Rect','geometry_msgs/Point[]','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_index,confidence,bounding_box_cv,location_bv,label

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.object_index is None:
        self.object_index = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.bounding_box_cv is None:
        self.bounding_box_cv = am_msgs.msg.Rect()
      if self.location_bv is None:
        self.location_bv = []
      if self.label is None:
        self.label = 0
    else:
      self.object_index = 0
      self.confidence = 0.
      self.bounding_box_cv = am_msgs.msg.Rect()
      self.location_bv = []
      self.label = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i5f().pack(_x.object_index, _x.confidence, _x.bounding_box_cv.x, _x.bounding_box_cv.y, _x.bounding_box_cv.width, _x.bounding_box_cv.height))
      length = len(self.location_bv)
      buff.write(_struct_I.pack(length))
      for val1 in self.location_bv:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_B().pack(self.label))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.bounding_box_cv is None:
        self.bounding_box_cv = am_msgs.msg.Rect()
      if self.location_bv is None:
        self.location_bv = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.object_index, _x.confidence, _x.bounding_box_cv.x, _x.bounding_box_cv.y, _x.bounding_box_cv.width, _x.bounding_box_cv.height,) = _get_struct_i5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.location_bv = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.location_bv.append(val1)
      start = end
      end += 1
      (self.label,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i5f().pack(_x.object_index, _x.confidence, _x.bounding_box_cv.x, _x.bounding_box_cv.y, _x.bounding_box_cv.width, _x.bounding_box_cv.height))
      length = len(self.location_bv)
      buff.write(_struct_I.pack(length))
      for val1 in self.location_bv:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_B().pack(self.label))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.bounding_box_cv is None:
        self.bounding_box_cv = am_msgs.msg.Rect()
      if self.location_bv is None:
        self.location_bv = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.object_index, _x.confidence, _x.bounding_box_cv.x, _x.bounding_box_cv.y, _x.bounding_box_cv.width, _x.bounding_box_cv.height,) = _get_struct_i5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.location_bv = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.location_bv.append(val1)
      start = end
      end += 1
      (self.label,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_i5f = None
def _get_struct_i5f():
    global _struct_i5f
    if _struct_i5f is None:
        _struct_i5f = struct.Struct("<i5f")
    return _struct_i5f
